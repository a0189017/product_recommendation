// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	model "product_recommendation/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

type AuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthRepository) EXPECT() *AuthRepository_Expecter {
	return &AuthRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *AuthRepository) CreateUser(user *model.Login) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Login) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type AuthRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *model.Login
func (_e *AuthRepository_Expecter) CreateUser(user interface{}) *AuthRepository_CreateUser_Call {
	return &AuthRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *AuthRepository_CreateUser_Call) Run(run func(user *model.Login)) *AuthRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Login))
	})
	return _c
}

func (_c *AuthRepository_CreateUser_Call) Return(_a0 error) *AuthRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthRepository_CreateUser_Call) RunAndReturn(run func(*model.Login) error) *AuthRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: account
func (_m *AuthRepository) GetUser(account string) (*model.Login, error) {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.Login
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Login, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Login); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Login)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type AuthRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - account string
func (_e *AuthRepository_Expecter) GetUser(account interface{}) *AuthRepository_GetUser_Call {
	return &AuthRepository_GetUser_Call{Call: _e.mock.On("GetUser", account)}
}

func (_c *AuthRepository_GetUser_Call) Run(run func(account string)) *AuthRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthRepository_GetUser_Call) Return(_a0 *model.Login, _a1 error) *AuthRepository_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthRepository_GetUser_Call) RunAndReturn(run func(string) (*model.Login, error)) *AuthRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *AuthRepository) UpdateUser(user *model.Login) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Login) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type AuthRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *model.Login
func (_e *AuthRepository_Expecter) UpdateUser(user interface{}) *AuthRepository_UpdateUser_Call {
	return &AuthRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *AuthRepository_UpdateUser_Call) Run(run func(user *model.Login)) *AuthRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Login))
	})
	return _c
}

func (_c *AuthRepository_UpdateUser_Call) Return(_a0 error) *AuthRepository_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthRepository_UpdateUser_Call) RunAndReturn(run func(*model.Login) error) *AuthRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
