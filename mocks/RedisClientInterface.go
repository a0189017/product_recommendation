// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/redis/go-redis/v9"
)

// RedisClientInterface is an autogenerated mock type for the RedisClientInterface type
type RedisClientInterface struct {
	mock.Mock
}

type RedisClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisClientInterface) EXPECT() *RedisClientInterface_Expecter {
	return &RedisClientInterface_Expecter{mock: &_m.Mock}
}

// GetRedisClient provides a mock function with no fields
func (_m *RedisClientInterface) GetRedisClient() *redis.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRedisClient")
	}

	var r0 *redis.Client
	if rf, ok := ret.Get(0).(func() *redis.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}

	return r0
}

// RedisClientInterface_GetRedisClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRedisClient'
type RedisClientInterface_GetRedisClient_Call struct {
	*mock.Call
}

// GetRedisClient is a helper method to define mock.On call
func (_e *RedisClientInterface_Expecter) GetRedisClient() *RedisClientInterface_GetRedisClient_Call {
	return &RedisClientInterface_GetRedisClient_Call{Call: _e.mock.On("GetRedisClient")}
}

func (_c *RedisClientInterface_GetRedisClient_Call) Run(run func()) *RedisClientInterface_GetRedisClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisClientInterface_GetRedisClient_Call) Return(_a0 *redis.Client) *RedisClientInterface_GetRedisClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisClientInterface_GetRedisClient_Call) RunAndReturn(run func() *redis.Client) *RedisClientInterface_GetRedisClient_Call {
	_c.Call.Return(run)
	return _c
}

// RedisPing provides a mock function with given fields: ctx
func (_m *RedisClientInterface) RedisPing(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RedisPing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisClientInterface_RedisPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedisPing'
type RedisClientInterface_RedisPing_Call struct {
	*mock.Call
}

// RedisPing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RedisClientInterface_Expecter) RedisPing(ctx interface{}) *RedisClientInterface_RedisPing_Call {
	return &RedisClientInterface_RedisPing_Call{Call: _e.mock.On("RedisPing", ctx)}
}

func (_c *RedisClientInterface_RedisPing_Call) Run(run func(ctx context.Context)) *RedisClientInterface_RedisPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RedisClientInterface_RedisPing_Call) Return(_a0 error) *RedisClientInterface_RedisPing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisClientInterface_RedisPing_Call) RunAndReturn(run func(context.Context) error) *RedisClientInterface_RedisPing_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisClientInterface creates a new instance of RedisClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisClientInterface {
	mock := &RedisClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
