// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	model "product_recommendation/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

type ProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepository) EXPECT() *ProductRepository_Expecter {
	return &ProductRepository_Expecter{mock: &_m.Mock}
}

// GetProductRecommendation provides a mock function with no fields
func (_m *ProductRepository) GetProductRecommendation() ([]*model.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProductRecommendation")
	}

	var r0 []*model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetProductRecommendation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductRecommendation'
type ProductRepository_GetProductRecommendation_Call struct {
	*mock.Call
}

// GetProductRecommendation is a helper method to define mock.On call
func (_e *ProductRepository_Expecter) GetProductRecommendation() *ProductRepository_GetProductRecommendation_Call {
	return &ProductRepository_GetProductRecommendation_Call{Call: _e.mock.On("GetProductRecommendation")}
}

func (_c *ProductRepository_GetProductRecommendation_Call) Run(run func()) *ProductRepository_GetProductRecommendation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProductRepository_GetProductRecommendation_Call) Return(productRecommendationList []*model.Product, err error) *ProductRepository_GetProductRecommendation_Call {
	_c.Call.Return(productRecommendationList, err)
	return _c
}

func (_c *ProductRepository_GetProductRecommendation_Call) RunAndReturn(run func() ([]*model.Product, error)) *ProductRepository_GetProductRecommendation_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductRecommendationFromRedis provides a mock function with no fields
func (_m *ProductRepository) GetProductRecommendationFromRedis() ([]*model.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProductRecommendationFromRedis")
	}

	var r0 []*model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetProductRecommendationFromRedis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductRecommendationFromRedis'
type ProductRepository_GetProductRecommendationFromRedis_Call struct {
	*mock.Call
}

// GetProductRecommendationFromRedis is a helper method to define mock.On call
func (_e *ProductRepository_Expecter) GetProductRecommendationFromRedis() *ProductRepository_GetProductRecommendationFromRedis_Call {
	return &ProductRepository_GetProductRecommendationFromRedis_Call{Call: _e.mock.On("GetProductRecommendationFromRedis")}
}

func (_c *ProductRepository_GetProductRecommendationFromRedis_Call) Run(run func()) *ProductRepository_GetProductRecommendationFromRedis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProductRepository_GetProductRecommendationFromRedis_Call) Return(_a0 []*model.Product, _a1 error) *ProductRepository_GetProductRecommendationFromRedis_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_GetProductRecommendationFromRedis_Call) RunAndReturn(run func() ([]*model.Product, error)) *ProductRepository_GetProductRecommendationFromRedis_Call {
	_c.Call.Return(run)
	return _c
}

// SetProductRecommendationToRedis provides a mock function with given fields: productRecommendationList
func (_m *ProductRepository) SetProductRecommendationToRedis(productRecommendationList []*model.Product) error {
	ret := _m.Called(productRecommendationList)

	if len(ret) == 0 {
		panic("no return value specified for SetProductRecommendationToRedis")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*model.Product) error); ok {
		r0 = rf(productRecommendationList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_SetProductRecommendationToRedis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProductRecommendationToRedis'
type ProductRepository_SetProductRecommendationToRedis_Call struct {
	*mock.Call
}

// SetProductRecommendationToRedis is a helper method to define mock.On call
//   - productRecommendationList []*model.Product
func (_e *ProductRepository_Expecter) SetProductRecommendationToRedis(productRecommendationList interface{}) *ProductRepository_SetProductRecommendationToRedis_Call {
	return &ProductRepository_SetProductRecommendationToRedis_Call{Call: _e.mock.On("SetProductRecommendationToRedis", productRecommendationList)}
}

func (_c *ProductRepository_SetProductRecommendationToRedis_Call) Run(run func(productRecommendationList []*model.Product)) *ProductRepository_SetProductRecommendationToRedis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*model.Product))
	})
	return _c
}

func (_c *ProductRepository_SetProductRecommendationToRedis_Call) Return(_a0 error) *ProductRepository_SetProductRecommendationToRedis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_SetProductRecommendationToRedis_Call) RunAndReturn(run func([]*model.Product) error) *ProductRepository_SetProductRecommendationToRedis_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
